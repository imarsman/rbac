# The assumed request subject, object, and action
[request_definition]
r = sub, obj, act

# The defined policy subject, object, and action
[policy_definition]
p = sub, obj, act

# Grouping capability to combine to make new groups
[role_definition]
g = _, _

# Get effect from evaluation
[policy_effect]
e = some(where (p.eft == allow))

# The matcher, which allows the grouping to produce new group combinations to
# new groups, the glob matching of path to call being tested, and a regex for
# the action allowed. Note the benchmark comparisons using the different methods
# of matching.
[matchers]
# cpu: Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz
# BenchmarkCheckRoles-12    	  199069	      7915 ns/op	   1.26 MB/s	    7521 B/op	     193 allocs/op
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act

# Using keymatch is faster than regex match and slower than ==
# cpu: Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz
# BenchmarkCheckRoles-12    	  129867	     10128 ns/op	   0.99 MB/s	    9873 B/op	     229 allocs/op
# m = g(r.sub, p.sub) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)

# If a regex match is to be used see notes in policy.csv on using them.
# It uses more allocations and is slower than both keymatch and ==
# Using regex would be worth it for things like matching api path patterns
# cpu: Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz
# BenchmarkCheckRoles-12    	   81706	     14035 ns/op	   0.71 MB/s	   15667 B/op	     296 allocs/op
# m = g(r.sub, p.sub) && keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)
